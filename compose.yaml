services:
    #######################################################
    # Frontend: Nextjs
    #######################################################
    web:
        build:
            context: ./frontend/healthy_app
            target: runner
        volumes:
            - ./frontend/healthy_app:/app
        command: npm run dev
        ports:
            - '3001:3001'
        environment:
            NODE_ENV: development

    #######################################################
    # User: The user microservice
    #######################################################
    user_microservice:
        build:
            context: ./backend/user_microservice
            dockerfile: Dockerfile
        image: yata/user:1.0
        restart: always
        ports:
            - '5001:5001'
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Timeslot: The time slot microservice
    #######################################################
    timeslot_microservice:
        build:
            context: ./backend/timeslot_microservice
            dockerfile: Dockerfile
        image: yata/timeslot:1.0
        restart: always
        ports:
            - '5002:5002'
        environment:
            PYTHONUNBUFFERED: 1

    ###################################
    # Appointment: The appointment microservice
    ###################################
    appointment_microservice:
        build:
            context: ./backend/appointment_microservice
            dockerfile: Dockerfile
        image: yata/appointment:1.0
        restart: always
        ports:
            - '5003:5003'
        environment:
            PYTHONUNBUFFERED: 1

    ###################################
    # Notification: The notification microservice
    ###################################
    notification_microservice:
        build:
            context: ./backend/notification_microservice
            dockerfile: Dockerfile
        image: yata/notification:1.0
        restart: always
        ports:
            - '5004:5004'
        environment:
            PYTHONUNBUFFERED: 1

    ###################################
    # Inventory: The inventory microservice
    ###################################
    inventory_microservice:
        build:
            context: ./backend/inventory_microservice
            dockerfile: Dockerfile
        image: yata/inventory:1.0
        restart: always
        ports:
            - '5005:5005'
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Delivery Order: Manages deliveries
    #######################################################
    delivery_order_microservice:
        build:
            context: ./backend/delivery_order_microservice
            dockerfile: Dockerfile
        image: yata/delivery_order:1.0
        restart: always
        ports:
            - '5006:5006'
        environment:
            PYTHONUNBUFFERED: 1

    ###################################
    # Payment: The payment microservice
    ###################################
    payment_microservice:
        build:
            context: ./backend/payment_microservice
            dockerfile: Dockerfile
        image: yata/payment:1.0
        restart: always
        ports:
            - '5007:5007'
        environment:
            PYTHONUNBUFFERED: 1

    ###################################
    # Medical Certificate: The MC microservice
    ###################################
    medical_certificate_microservice:
        build:
            context: ./backend/medical_certificate_microservice
            dockerfile: Dockerfile
        image: yata/medical_certificate:1.0
        restart: always
        ports:
            - '5008:5008'
        environment:
            PYTHONUNBUFFERED: 1
        depends_on:
            - rabbit_amqp

    #######################################################
    # Zoom: The Zoom microservice
    #######################################################
    zoom_microservice:
        build:
            context: ./backend/zoom_microservice
            dockerfile: Dockerfile
        image: yata/zoom:1.0
        restart: always
        ports:
            - '5009:5009'
        environment:
            PYTHONUNBUFFERED: 1

    ################## COMPLEX MICROSERVICES BELOW ##################

    #######################################################
    # Manage Booking: Manages timelsot and appointment microservice
    #######################################################
    manage_booking_microservice:
        build:
            context: ./backend/manage_booking_complex_microservice
            dockerfile: Dockerfile
        image: yata/manage_booking_complex:1.0
        restart: always
        ports:
            - '5101:5101'
        depends_on:
            - timeslot_microservice
            - appointment_microservice
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Manage Cancellation: Manages cancellations and notifies patient
    #######################################################
    manage_cancellation_microservice:
        build:
            context: ./backend/manage_cancellation_complex_microservice
            dockerfile: Dockerfile
        image: yata/manage_cancellation_complex:1.0
        restart: always
        ports:
            - '5102:5102'
        depends_on:
            - timeslot_microservice
            - appointment_microservice
            - notification_microservice
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Create Delivery: Updates inventory and creates delivery order
    #######################################################
    create_delivery_microservice:
        build:
            context: ./backend/create_delivery_complex_microservice
            dockerfile: Dockerfile
        image: yata/create_delivery_complex:1.0
        restart: always
        ports:
            - '5103:5103'
        depends_on:
            - inventory_microservice
            - delivery_order_microservice
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Manage Consult: Manages consultation completion
    #######################################################
    manage_consult_microservice:
        build:
            context: ./backend/manage_consult_complex_microservice
            dockerfile: Dockerfile
        image: yata/manage_consult_complex:1.0
        restart: always
        ports:
            - '5104:5104'
        depends_on:
            - appointment_microservice
            - medical_certificate_microservice
            - create_delivery_microservice
            - rabbit_amqp
        environment:
            PYTHONUNBUFFERED: 1

    #######################################################
    # Manage dataset: Manages dataset
    #######################################################
    manage_dataset_microservice:
        build:
            context: ./backend/manage_dataset_complex_microservice
            dockerfile: Dockerfile
        image: yata/manage_dataset_complex:1.0
        restart: always
        ports:
            - '5109:5109'
        depends_on:
            - user_microservice
            - timeslot_microservice
            - appointment_microservice
            - notification_microservice
            - inventory_microservice
            - delivery_order_microservice
            - payment_microservice
            - medical_certificate_microservice
        environment:
            PYTHONUNBUFFERED: 1

    ################## AMQP BELOW ##################

    #######################################################
    # AMQP: RabbitMQ
    #######################################################
    rabbit_amqp:
        image: rabbitmq:3-management
        hostname: rabbit
        restart: always
        ports:
            - '5672:5672'
            - '15672:15672'
        # environment:
        #     RABBITMQ_DEFAULT_USER: guest
        #     RABBITMQ_DEFAULT_PASS: guest

    ################## Krakend ##################

    #######################################################
    # API Gateway: Krakend
    #######################################################
    krakend_ce:
        # The :watch image restarts the service automatically when the configuration files change.
        # Do not use this image in production, it's meant to speed up your testing and development.
        image: devopsfaith/krakend:watch
        volumes:
            - ./config/krakend:/etc/krakend
        ports:
            - '8080:8080'
        depends_on:
            - user_microservice
            - timeslot_microservice
            - appointment_microservice
            - inventory_microservice
            - manage_cancellation_microservice
            - manage_consult_microservice
            - manage_booking_microservice
        command: ['run', '-d', '-c', '/etc/krakend/krakend.json']
